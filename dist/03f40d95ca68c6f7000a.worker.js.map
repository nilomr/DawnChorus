{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/jsfft/dist/fft.js","webpack:///./node_modules/jsfft/dist/complex_array.js","webpack:///./src/math-util.ts","webpack:///./src/spectrogram.ts","webpack:///./src/workers/helper.worker.ts","webpack:///./src/worker-constants.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ComplexArray","undefined","_createClass","defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","FFT","input","ensureComplexArray","InvFFT","frequencyMap","filterer","obj","_complex_array","_complex_array2","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","PI","Math","SQRT1_2","_baseComplexArray","this","__proto__","getPrototypeOf","apply","arguments","subClass","superClass","constructor","setPrototypeOf","_inherits","fft","map","inverse","output","ArrayType","sqrt_n","sqrt","factor","LowestOddFactor","normalisation","recursive_result","j","real","imag","del_f_r","cos","del_f_i","sin","f_r","f_i","_i","_real","_imag","_ref","_i2","FFT_Recursive","array","flips","Set","r_i","BitReverseIndex","has","_ref3","_ref4","add","BitReverseComplexArray","output_r","output_i","width","l_index","r_index","left_r","left_i","right_r","right_i","_ref2","FFT_2_Iterative","index","bitreversed_index","other","arrayType","Float32Array","components","forEach","push","toFixed","join","iterator","seal","mapper","_this","mags","hzToMel","hz","log10","melToHz","mel","lerp","a","b","inverseLerp","BLACKMAN_HARRIS_COEFFICIENTS","blackmanHarris","samples","result","generateSpectrogramForSingleFrame","windowSamples","resultBuffer","resultBufferIndex","minFrequencyHz","maxFrequencyHz","sampleRate","scale","scaleSize","scaleAmount","Error","lowerN","floor","upperN","ceil","amplitude","addEventListener","event","data","action","payload","samplesBuffer","samplesStart","samplesLength","options","windowCount","spectrogramWindowCount","spectrogramOptions","spectrogram","isStart","isEnd","windowSize","windowStepSize","numWindows","startIdx","additionalWindows","windowIdx","sampleIdx","generateSpectrogram","response","spectrogramBuffer","buffer","inputBuffer","postMessage","error"],"mappings":"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","file":"03f40d95ca68c6f7000a.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComplexArray = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.FFT = FFT;\nexports.InvFFT = InvFFT;\nexports.frequencyMap = frequencyMap;\n\nvar _complex_array = require('./complex_array');\n\nvar _complex_array2 = _interopRequireDefault(_complex_array);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Math constants and functions we need.\nvar PI = Math.PI;\nvar SQRT1_2 = Math.SQRT1_2;\n\nfunction FFT(input) {\n  return ensureComplexArray(input).FFT();\n};\n\nfunction InvFFT(input) {\n  return ensureComplexArray(input).InvFFT();\n};\n\nfunction frequencyMap(input, filterer) {\n  return ensureComplexArray(input).frequencyMap(filterer);\n};\n\nvar ComplexArray = exports.ComplexArray = function (_baseComplexArray) {\n  _inherits(ComplexArray, _baseComplexArray);\n\n  function ComplexArray() {\n    _classCallCheck(this, ComplexArray);\n\n    return _possibleConstructorReturn(this, (ComplexArray.__proto__ || Object.getPrototypeOf(ComplexArray)).apply(this, arguments));\n  }\n\n  _createClass(ComplexArray, [{\n    key: 'FFT',\n    value: function FFT() {\n      return fft(this, false);\n    }\n  }, {\n    key: 'InvFFT',\n    value: function InvFFT() {\n      return fft(this, true);\n    }\n\n    // Applies a frequency-space filter to input, and returns the real-space\n    // filtered input.\n    // filterer accepts freq, i, n and modifies freq.real and freq.imag.\n\n  }, {\n    key: 'frequencyMap',\n    value: function frequencyMap(filterer) {\n      return this.FFT().map(filterer).InvFFT();\n    }\n  }]);\n\n  return ComplexArray;\n}(_complex_array2.default);\n\nfunction ensureComplexArray(input) {\n  return input instanceof ComplexArray && input || new ComplexArray(input);\n}\n\nfunction fft(input, inverse) {\n  var n = input.length;\n\n  if (n & n - 1) {\n    return FFT_Recursive(input, inverse);\n  } else {\n    return FFT_2_Iterative(input, inverse);\n  }\n}\n\nfunction FFT_Recursive(input, inverse) {\n  var n = input.length;\n\n  if (n === 1) {\n    return input;\n  }\n\n  var output = new ComplexArray(n, input.ArrayType);\n\n  // Use the lowest odd factor, so we are able to use FFT_2_Iterative in the\n  // recursive transforms optimally.\n  var p = LowestOddFactor(n);\n  var m = n / p;\n  var normalisation = 1 / Math.sqrt(p);\n  var recursive_result = new ComplexArray(m, input.ArrayType);\n\n  // Loops go like O(n Σ p_i), where p_i are the prime factors of n.\n  // for a power of a prime, p, this reduces to O(n p log_p n)\n  for (var j = 0; j < p; j++) {\n    for (var i = 0; i < m; i++) {\n      recursive_result.real[i] = input.real[i * p + j];\n      recursive_result.imag[i] = input.imag[i * p + j];\n    }\n    // Don't go deeper unless necessary to save allocs.\n    if (m > 1) {\n      recursive_result = fft(recursive_result, inverse);\n    }\n\n    var del_f_r = Math.cos(2 * PI * j / n);\n    var del_f_i = (inverse ? -1 : 1) * Math.sin(2 * PI * j / n);\n    var f_r = 1;\n    var f_i = 0;\n\n    for (var _i = 0; _i < n; _i++) {\n      var _real = recursive_result.real[_i % m];\n      var _imag = recursive_result.imag[_i % m];\n\n      output.real[_i] += f_r * _real - f_i * _imag;\n      output.imag[_i] += f_r * _imag + f_i * _real;\n\n      var _ref = [f_r * del_f_r - f_i * del_f_i, f_i = f_r * del_f_i + f_i * del_f_r];\n      f_r = _ref[0];\n      f_i = _ref[1];\n    }\n  }\n\n  // Copy back to input to match FFT_2_Iterative in-placeness\n  // TODO: faster way of making this in-place?\n  for (var _i2 = 0; _i2 < n; _i2++) {\n    input.real[_i2] = normalisation * output.real[_i2];\n    input.imag[_i2] = normalisation * output.imag[_i2];\n  }\n\n  return input;\n}\n\nfunction FFT_2_Iterative(input, inverse) {\n  var n = input.length;\n\n  var output = BitReverseComplexArray(input);\n  var output_r = output.real;\n  var output_i = output.imag;\n  // Loops go like O(n log n):\n  //   width ~ log n; i,j ~ n\n  var width = 1;\n  while (width < n) {\n    var del_f_r = Math.cos(PI / width);\n    var del_f_i = (inverse ? -1 : 1) * Math.sin(PI / width);\n    for (var i = 0; i < n / (2 * width); i++) {\n      var f_r = 1;\n      var f_i = 0;\n      for (var j = 0; j < width; j++) {\n        var l_index = 2 * i * width + j;\n        var r_index = l_index + width;\n\n        var left_r = output_r[l_index];\n        var left_i = output_i[l_index];\n        var right_r = f_r * output_r[r_index] - f_i * output_i[r_index];\n        var right_i = f_i * output_r[r_index] + f_r * output_i[r_index];\n\n        output_r[l_index] = SQRT1_2 * (left_r + right_r);\n        output_i[l_index] = SQRT1_2 * (left_i + right_i);\n        output_r[r_index] = SQRT1_2 * (left_r - right_r);\n        output_i[r_index] = SQRT1_2 * (left_i - right_i);\n\n        var _ref2 = [f_r * del_f_r - f_i * del_f_i, f_r * del_f_i + f_i * del_f_r];\n        f_r = _ref2[0];\n        f_i = _ref2[1];\n      }\n    }\n    width <<= 1;\n  }\n\n  return output;\n}\n\nfunction BitReverseIndex(index, n) {\n  var bitreversed_index = 0;\n\n  while (n > 1) {\n    bitreversed_index <<= 1;\n    bitreversed_index += index & 1;\n    index >>= 1;\n    n >>= 1;\n  }\n  return bitreversed_index;\n}\n\nfunction BitReverseComplexArray(array) {\n  var n = array.length;\n  var flips = new Set();\n\n  for (var i = 0; i < n; i++) {\n    var r_i = BitReverseIndex(i, n);\n\n    if (flips.has(i)) continue;\n\n    var _ref3 = [array.real[r_i], array.real[i]];\n    array.real[i] = _ref3[0];\n    array.real[r_i] = _ref3[1];\n    var _ref4 = [array.imag[r_i], array.imag[i]];\n    array.imag[i] = _ref4[0];\n    array.imag[r_i] = _ref4[1];\n\n\n    flips.add(r_i);\n  }\n\n  return array;\n}\n\nfunction LowestOddFactor(n) {\n  var sqrt_n = Math.sqrt(n);\n  var factor = 3;\n\n  while (factor <= sqrt_n) {\n    if (n % factor === 0) return factor;\n    factor += 2;\n  }\n  return n;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ComplexArray = function () {\n  function ComplexArray(other) {\n    var arrayType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Float32Array;\n\n    _classCallCheck(this, ComplexArray);\n\n    if (other instanceof ComplexArray) {\n      // Copy constuctor.\n      this.ArrayType = other.ArrayType;\n      this.real = new this.ArrayType(other.real);\n      this.imag = new this.ArrayType(other.imag);\n    } else {\n      this.ArrayType = arrayType;\n      // other can be either an array or a number.\n      this.real = new this.ArrayType(other);\n      this.imag = new this.ArrayType(this.real.length);\n    }\n\n    this.length = this.real.length;\n  }\n\n  _createClass(ComplexArray, [{\n    key: 'toString',\n    value: function toString() {\n      var components = [];\n\n      this.forEach(function (value, i) {\n        components.push('(' + value.real.toFixed(2) + ', ' + value.imag.toFixed(2) + ')');\n      });\n\n      return '[' + components.join(', ') + ']';\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(iterator) {\n      var n = this.length;\n      // For gc efficiency, re-use a single object in the iterator.\n      var value = Object.seal(Object.defineProperties({}, {\n        real: { writable: true }, imag: { writable: true }\n      }));\n\n      for (var i = 0; i < n; i++) {\n        value.real = this.real[i];\n        value.imag = this.imag[i];\n        iterator(value, i, n);\n      }\n    }\n\n    // In-place mapper.\n\n  }, {\n    key: 'map',\n    value: function map(mapper) {\n      var _this = this;\n\n      this.forEach(function (value, i, n) {\n        mapper(value, i, n);\n        _this.real[i] = value.real;\n        _this.imag[i] = value.imag;\n      });\n\n      return this;\n    }\n  }, {\n    key: 'conjugate',\n    value: function conjugate() {\n      return new ComplexArray(this).map(function (value) {\n        value.imag *= -1;\n      });\n    }\n  }, {\n    key: 'magnitude',\n    value: function magnitude() {\n      var mags = new this.ArrayType(this.length);\n\n      this.forEach(function (value, i) {\n        mags[i] = Math.sqrt(value.real * value.real + value.imag * value.imag);\n      });\n\n      return mags;\n    }\n  }]);\n\n  return ComplexArray;\n}();\n\nexports.default = ComplexArray;","export type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\nexport function hzToMel(hz: number): number {\n    return 2595 * Math.log10(1 + hz / 700);\n}\n\nexport function melToHz(mel: number): number {\n    return 700 * (10 ** (mel / 2595) - 1);\n}\n\nexport function log(base: number, x: number): number {\n    return Math.log(x) / Math.log(base);\n}\n\nexport function clamp(x: number, min: number, max: number): number {\n    return Math.max(Math.min(x, max), min);\n}\n\nexport function lerp(a: number, b: number, t: number): number {\n    return a + t * (b - a);\n}\n\nexport function inverseLerp(a: number, b: number, n: number): number {\n    return (a - n) / (a - b);\n}\n\nexport function mod(x: number, y: number): number {\n    return ((x % y) + y) % y;\n}\n\nconst BLACKMAN_HARRIS_COEFFICIENTS: number[] = [\n    0.27105140069342,\n    -0.43329793923448,\n    0.21812299954311,\n    -0.06592544638803,\n    0.01081174209837,\n    -0.00077658482522,\n    0.00001388721735,\n];\n\nexport function blackmanHarris(n: number, samples: number): number {\n    let result = 0;\n    for (let i = 0; i < BLACKMAN_HARRIS_COEFFICIENTS.length; i += 1) {\n        result += BLACKMAN_HARRIS_COEFFICIENTS[i] * Math.cos((2 * Math.PI * i * n) / samples);\n    }\n    return result;\n}\n\n// Circular queue of 2D data along the x-axis\nexport class Circular2DBuffer<T extends TypedArray> {\n    public width: number;\n\n    public height: number;\n\n    public elementSize: number;\n\n    public start: number;\n\n    public length: number;\n\n    public data: T;\n\n    constructor(\n        TypeOrData: T | { new (length: number): T },\n        width: number,\n        height: number,\n        elementSize: number,\n        start: number = 0,\n        length: number = 0\n    ) {\n        this.width = width;\n        this.height = height;\n        this.elementSize = elementSize;\n        this.start = start;\n        this.length = length;\n        if (typeof TypeOrData === 'function') {\n            this.data = new TypeOrData(width * height * elementSize);\n        } else {\n            this.data = TypeOrData;\n        }\n    }\n\n    enqueue(data: T): void {\n        const dataWidth = data.length / (this.elementSize * this.height);\n        for (let i = 0; i < dataWidth; i += 1) {\n            const x = mod(this.start + this.length + i, this.width);\n            this.data.set(data.subarray(i * this.height, (i + 1) * this.height), x * this.height);\n        }\n\n        this.length += dataWidth;\n        if (this.length > this.width) {\n            this.start = mod(this.start + this.length - this.width, this.width);\n            this.length = this.width;\n        }\n    }\n\n    // Resizes the width of the queue, preserving newer image data\n    resizeWidth(width: number) {\n        if (width === this.width) {\n            return;\n        }\n\n        const newData: T = new (Object.getPrototypeOf(this.data).constructor)(\n            width * this.height * this.elementSize\n        );\n        for (let i = 0; i < Math.min(this.length, width); i += 1) {\n            const newX = Math.min(this.length, width) - i - 1;\n            const oldX = mod(this.start + this.length - i - 1, this.width);\n            newData.set(\n                this.data.subarray(oldX * this.height, (oldX + 1) * this.height),\n                newX * this.height\n            );\n        }\n        this.data = newData;\n        this.width = width;\n        if (this.length >= this.width) {\n            this.length = this.width;\n        }\n        this.start = 0;\n    }\n\n    clear() {\n        const newData: T = new (Object.getPrototypeOf(this.data).constructor)(\n            this.width * this.height * this.elementSize\n        );\n        this.data = newData;\n        this.start = 0;\n        this.length = 0;\n    }\n}\n","import { FFT } from 'jsfft';\n\nimport { blackmanHarris, hzToMel, inverseLerp, lerp, melToHz } from './math-util';\n\nexport type Scale = 'linear' | 'mel';\n\nexport interface SpectrogramOptions {\n    isStart?: boolean;\n    isEnd?: boolean;\n    windowSize?: number;\n    windowStepSize?: number;\n    minFrequencyHz?: number;\n    maxFrequencyHz?: number;\n    sampleRate: number;\n    scale?: Scale;\n    scaleSize?: number;\n}\n\nexport interface SpectrogramResult {\n    windowCount: number;\n    options: Required<SpectrogramOptions>;\n    spectrogram: Float32Array;\n}\n\nfunction generateSpectrogramForSingleFrame(\n    windowSamples: Float32Array,\n    resultBuffer: Float32Array,\n    resultBufferIndex: number,\n    minFrequencyHz: number,\n    maxFrequencyHz: number,\n    sampleRate: number,\n    scale: Scale,\n    scaleSize: number\n) {\n    // Apply a Blackman-Harris windowing function to the input\n    for (let i = 0; i < windowSamples.length; i += 1) {\n        windowSamples[i] *= blackmanHarris(i, windowSamples.length);\n    }\n\n    const fft = FFT(windowSamples);\n    for (let j = 0; j < scaleSize; j += 1) {\n        const scaleAmount = inverseLerp(0, scaleSize - 1, j);\n        let n;\n        switch (scale) {\n            case 'linear': {\n                const hz = lerp(minFrequencyHz, maxFrequencyHz, scaleAmount);\n                n = (hz * windowSamples.length) / sampleRate;\n                break;\n            }\n            case 'mel': {\n                const mel = lerp(hzToMel(minFrequencyHz), hzToMel(maxFrequencyHz), scaleAmount);\n                n = (melToHz(mel) * windowSamples.length) / sampleRate;\n                break;\n            }\n            default:\n                throw new Error('Unknown scale');\n        }\n\n        const lowerN = Math.floor(n);\n        const upperN = Math.ceil(n);\n\n        const amplitude =\n            lerp(\n                Math.sqrt(fft.real[lowerN] ** 2 + fft.imag[lowerN] ** 2),\n                Math.sqrt(fft.real[upperN] ** 2 + fft.imag[upperN] ** 2),\n                n - lowerN\n            ) / Math.sqrt(windowSamples.length);\n\n        resultBuffer[resultBufferIndex + j] = amplitude;\n    }\n}\n\nexport function generateSpectrogram(\n    samples: Float32Array,\n    samplesStart: number,\n    samplesLength: number,\n    {\n        isStart = false, // Is the frame at the start of the audio\n        isEnd = false, // Is the frame at the end of the audio\n        windowSize = 4096, // Size of the FFT window in samples\n        windowStepSize = 1024, // Number of samples between each FFT window\n        minFrequencyHz, // Smallest frequency in Hz to calculate the spectrogram for\n        maxFrequencyHz, // Largest frequency in Hz to calculate the spectrogram for\n        sampleRate, // Sample rate of the audio\n        scale = 'linear', // Scale of the returned spectrogram (can be 'linear' or 'mel')\n        scaleSize, // Number of rows in the returned spectrogram\n    }: SpectrogramOptions\n): SpectrogramResult {\n    if (minFrequencyHz === undefined) {\n        minFrequencyHz = 0;\n    }\n    if (maxFrequencyHz === undefined) {\n        maxFrequencyHz = (sampleRate * (windowSize - 2)) / (2 * windowSize);\n    }\n    if (scaleSize === undefined) {\n        scaleSize = windowSize / 2;\n    }\n    if (windowSize % windowStepSize !== 0) {\n        throw new Error('Window step size must be evenly divisible by the window size');\n    }\n\n    let numWindows =\n        Math.ceil(samplesLength / windowStepSize) - Math.floor(windowSize / windowStepSize) + 1;\n    let startIdx = samplesStart;\n    if (isStart || isEnd) {\n        const additionalWindows = Math.floor(windowSize / windowStepSize) - 1;\n        if (isStart) {\n            numWindows += additionalWindows;\n            startIdx -= additionalWindows * windowStepSize;\n        }\n        if (isEnd) {\n            numWindows += additionalWindows;\n        }\n    }\n\n    const result = new Float32Array(scaleSize * numWindows);\n    const windowSamples = new Float32Array(windowSize);\n\n    for (\n        let i = startIdx, windowIdx = 0;\n        windowIdx < numWindows * scaleSize;\n        i += windowStepSize, windowIdx += scaleSize\n    ) {\n        for (let j = 0; j < windowSize; j += 1) {\n            const sampleIdx = i + j;\n            if (sampleIdx < samplesStart || sampleIdx >= samplesStart + samplesLength) {\n                windowSamples[j] = 0;\n            } else {\n                windowSamples[j] = samples[sampleIdx];\n            }\n        }\n\n        generateSpectrogramForSingleFrame(\n            windowSamples,\n            result,\n            windowIdx,\n            minFrequencyHz,\n            maxFrequencyHz,\n            sampleRate,\n            scale,\n            scaleSize\n        );\n    }\n\n    return {\n        windowCount: numWindows,\n        options: {\n            isStart,\n            isEnd,\n            windowSize,\n            windowStepSize,\n            minFrequencyHz,\n            maxFrequencyHz,\n            sampleRate,\n            scale,\n            scaleSize,\n        },\n        spectrogram: result,\n    };\n}\n","import { generateSpectrogram } from '../spectrogram';\nimport {\n    ACTION_COMPUTE_SPECTROGRAM,\n    ComputeSpectrogramMessage,\n    Message,\n} from '../worker-constants';\n\nself.addEventListener('message', (event: { data: Message['request'] }) => {\n    const {\n        data: { action, payload },\n    } = event;\n\n    switch (action) {\n        case ACTION_COMPUTE_SPECTROGRAM: {\n            const {\n                samplesBuffer,\n                samplesStart,\n                samplesLength,\n                options,\n            } = payload as ComputeSpectrogramMessage['request']['payload'];\n\n            try {\n                const samples = new Float32Array(samplesBuffer);\n                const {\n                    windowCount: spectrogramWindowCount,\n                    options: spectrogramOptions,\n                    spectrogram,\n                } = generateSpectrogram(samples, samplesStart, samplesLength, options);\n\n                const response: ComputeSpectrogramMessage['response'] = {\n                    payload: {\n                        spectrogramWindowCount,\n                        spectrogramOptions,\n                        spectrogramBuffer: spectrogram.buffer,\n                        inputBuffer: samples.buffer,\n                    },\n                };\n                self.postMessage(response, [spectrogram.buffer, samples.buffer]);\n            } catch (error) {\n                const response: ComputeSpectrogramMessage['response'] = { error };\n                self.postMessage(response);\n            }\n\n            break;\n        }\n        default:\n            self.postMessage({\n                error: new Error('Unknown action'),\n            });\n            break;\n    }\n});\n","import { SpectrogramOptions } from './spectrogram';\n\nexport const ACTION_COMPUTE_SPECTROGRAM = 'spectrogram-compute';\n\ninterface MessageBase<T, U, V> {\n    request: {\n        action: T;\n        payload: U;\n    };\n    response: {\n        payload?: V;\n        error?: Error;\n    };\n}\n\nexport type ComputeSpectrogramMessage = MessageBase<\n    typeof ACTION_COMPUTE_SPECTROGRAM,\n    {\n        samplesBuffer: ArrayBufferLike;\n        samplesStart: number;\n        samplesLength: number;\n        options: SpectrogramOptions;\n    },\n    {\n        spectrogramWindowCount: number;\n        spectrogramOptions: Required<SpectrogramOptions>;\n        spectrogramBuffer: ArrayBufferLike;\n        inputBuffer: ArrayBufferLike;\n    }\n>;\n\nexport type Message = ComputeSpectrogramMessage;\n"],"sourceRoot":""}